// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18444
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace PointOfSales.Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class AddSalesCombinationToOrderFeature : Xunit.IUseFixture<AddSalesCombinationToOrderFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "AddSalesCombinationToOrder.feature"
#line hidden
        
        public AddSalesCombinationToOrderFeature()
        {
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Add sales combination to order", "In order to quickly fill order with products on sale\nAs a salesman\nI want to be a" +
                    "ble to add a sales combination to an order", ProgrammingLanguage.CSharp, new string[] {
                        "orders",
                        "sales"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 7
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Price"});
            table1.AddRow(new string[] {
                        "Apple iPhone 5",
                        "500"});
            table1.AddRow(new string[] {
                        "Belkin Charge",
                        "50"});
            table1.AddRow(new string[] {
                        "Speck SmartFlex Case",
                        "100"});
#line 8
 testRunner.Given("there are following products in shop", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "MainProduct",
                        "SubProduct",
                        "Discount"});
            table2.AddRow(new string[] {
                        "Apple iPhone 5",
                        "Belkin Charge",
                        "5"});
            table2.AddRow(new string[] {
                        "Apple iPhone 5",
                        "Speck SmartFlex Case",
                        "20"});
#line 13
 testRunner.And("there are following sales combinations in shop", ((string)(null)), table2, "And ");
#line hidden
        }
        
        public virtual void SetFixture(AddSalesCombinationToOrderFeature.FixtureData fixtureData)
        {
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Add sales combination to order")]
        [Xunit.TraitAttribute("Description", "Add sales combination to empty order")]
        public virtual void AddSalesCombinationToEmptyOrder()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add sales combination to empty order", ((string[])(null)));
#line 18
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 19
 testRunner.Given("I have an empty order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "MainProduct",
                        "SubProduct"});
            table3.AddRow(new string[] {
                        "Apple iPhone 5",
                        "Belkin Charge"});
#line 20
 testRunner.When("I add following sales combination to this order", ((string)(null)), table3, "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductName",
                        "Quantity"});
            table4.AddRow(new string[] {
                        "Apple iPhone 5",
                        "1"});
            table4.AddRow(new string[] {
                        "Belkin Charge",
                        "1"});
#line 23
 testRunner.Then("order should have following lines", ((string)(null)), table4, "Then ");
#line 27
  testRunner.And("total price should be 545", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Add sales combination to order")]
        [Xunit.TraitAttribute("Description", "Add sales combination to order with one product from combination")]
        public virtual void AddSalesCombinationToOrderWithOneProductFromCombination()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add sales combination to order with one product from combination", ((string[])(null)));
#line 29
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 30
 testRunner.Given("I have an empty order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 31
 testRunner.When("I add \'Apple iPhone 5\' to this order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "MainProduct",
                        "SubProduct"});
            table5.AddRow(new string[] {
                        "Apple iPhone 5",
                        "Belkin Charge"});
#line 32
  testRunner.And("I add following sales combination to this order", ((string)(null)), table5, "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductName",
                        "Quantity"});
            table6.AddRow(new string[] {
                        "Apple iPhone 5",
                        "2"});
            table6.AddRow(new string[] {
                        "Belkin Charge",
                        "1"});
#line 35
 testRunner.Then("order should have following lines", ((string)(null)), table6, "Then ");
#line 39
   testRunner.And("total price should be 1045", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Add sales combination to order")]
        [Xunit.TraitAttribute("Description", "Add two products from sales combination")]
        public virtual void AddTwoProductsFromSalesCombination()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add two products from sales combination", ((string[])(null)));
#line 41
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 42
 testRunner.Given("I have an empty order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 43
 testRunner.When("I add \'Apple iPhone 5\' to this order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 44
 testRunner.And("I add \'Belkin Charge\' to this order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductName",
                        "Quantity"});
            table7.AddRow(new string[] {
                        "Apple iPhone 5",
                        "1"});
            table7.AddRow(new string[] {
                        "Belkin Charge",
                        "1"});
#line 45
 testRunner.Then("order should have following lines", ((string)(null)), table7, "Then ");
#line 49
  testRunner.And("total price should be 545", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Add sales combination to order")]
        [Xunit.TraitAttribute("Description", "Add sales combination to order with both products from combination")]
        public virtual void AddSalesCombinationToOrderWithBothProductsFromCombination()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add sales combination to order with both products from combination", ((string[])(null)));
#line 51
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 52
 testRunner.Given("I have an empty order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 53
 testRunner.When("I add \'Apple iPhone 5\' to this order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 54
 testRunner.And("I add \'Belkin Charge\' to this order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "MainProduct",
                        "SubProduct"});
            table8.AddRow(new string[] {
                        "Apple iPhone 5",
                        "Belkin Charge"});
#line 55
 testRunner.And("I add following sales combination to this order", ((string)(null)), table8, "And ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductName",
                        "Quantity"});
            table9.AddRow(new string[] {
                        "Apple iPhone 5",
                        "2"});
            table9.AddRow(new string[] {
                        "Belkin Charge",
                        "2"});
#line 58
 testRunner.Then("order should have following lines", ((string)(null)), table9, "Then ");
#line 62
  testRunner.And("total price should be 1090", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                AddSalesCombinationToOrderFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                AddSalesCombinationToOrderFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
