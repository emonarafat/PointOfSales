// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18444
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace PointOfSales.Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class ViewAvailableSalesCombinationsOfProductFeature : Xunit.IUseFixture<ViewAvailableSalesCombinationsOfProductFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ViewAvailableSalesCombinationsOfProduct.feature"
#line hidden
        
        public ViewAvailableSalesCombinationsOfProductFeature()
        {
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "View available sales combinations of product", "In order to suggest a discount\nAs a salesman\nI want to view the available sales c" +
                    "ombinations when selecting a product", ProgrammingLanguage.CSharp, new string[] {
                        "sales"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 7
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table1.AddRow(new string[] {
                        "Apple iPhone 5"});
            table1.AddRow(new string[] {
                        "Nokia 3310"});
            table1.AddRow(new string[] {
                        "Belkin Charge"});
            table1.AddRow(new string[] {
                        "Speck SmartFlex Case"});
            table1.AddRow(new string[] {
                        "Speck GemShell Case"});
#line 8
 testRunner.Given("there are following products in shop", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "MainProduct",
                        "SubProduct"});
            table2.AddRow(new string[] {
                        "Apple iPhone 5",
                        "Belkin Charge"});
            table2.AddRow(new string[] {
                        "Apple iPhone 5",
                        "Speck SmartFlex Case"});
            table2.AddRow(new string[] {
                        "Speck SmartFlex Case",
                        "Speck GemShell Case"});
#line 15
 testRunner.And("there are following sales combinations in shop", ((string)(null)), table2, "And ");
#line hidden
        }
        
        public virtual void SetFixture(ViewAvailableSalesCombinationsOfProductFeature.FixtureData fixtureData)
        {
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "View available sales combinations of product")]
        [Xunit.TraitAttribute("Description", "Product does not have available sales combinations")]
        public virtual void ProductDoesNotHaveAvailableSalesCombinations()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Product does not have available sales combinations", ((string[])(null)));
#line 21
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 22
 testRunner.When("I view available sales combinations of product \'Nokia 3310\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 23
 testRunner.Then("I do not see any sales combinations", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "View available sales combinations of product")]
        [Xunit.TraitAttribute("Description", "Product is the main product of sales combinations")]
        public virtual void ProductIsTheMainProductOfSalesCombinations()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Product is the main product of sales combinations", ((string[])(null)));
#line 25
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 26
 testRunner.When("I view available sales combinations of product \'Apple iPhone 5\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "MainProduct",
                        "SubProduct"});
            table3.AddRow(new string[] {
                        "Apple iPhone 5",
                        "Belkin Charge"});
            table3.AddRow(new string[] {
                        "Apple iPhone 5",
                        "Speck SmartFlex Case"});
#line 27
 testRunner.Then("I see following sales combinations", ((string)(null)), table3, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "View available sales combinations of product")]
        [Xunit.TraitAttribute("Description", "Product is the sub product of sales combination")]
        public virtual void ProductIsTheSubProductOfSalesCombination()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Product is the sub product of sales combination", ((string[])(null)));
#line 32
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 33
 testRunner.When("I view available sales combinations of product \'Belkin Charge\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "MainProduct",
                        "SubProduct"});
            table4.AddRow(new string[] {
                        "Apple iPhone 5",
                        "Belkin Charge"});
#line 34
 testRunner.Then("I see following sales combinations", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "View available sales combinations of product")]
        [Xunit.TraitAttribute("Description", "Product is both main and sub product of sales combinations")]
        public virtual void ProductIsBothMainAndSubProductOfSalesCombinations()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Product is both main and sub product of sales combinations", ((string[])(null)));
#line 38
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 39
 testRunner.When("I view available sales combinations of product \'Speck SmartFlex Case\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "MainProduct",
                        "SubProduct"});
            table5.AddRow(new string[] {
                        "Apple iPhone 5",
                        "Speck SmartFlex Case"});
            table5.AddRow(new string[] {
                        "Speck SmartFlex Case",
                        "Speck GemShell Case"});
#line 40
 testRunner.Then("I see following sales combinations", ((string)(null)), table5, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                ViewAvailableSalesCombinationsOfProductFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                ViewAvailableSalesCombinationsOfProductFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
