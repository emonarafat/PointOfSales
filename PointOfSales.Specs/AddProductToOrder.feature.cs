// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18444
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace PointOfSales.Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class AddProductsToOrderFeature : Xunit.IUseFixture<AddProductsToOrderFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "AddProductToOrder.feature"
#line hidden
        
        public AddProductsToOrderFeature()
        {
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Add products to order", "In order to sell products\nAs a salesman\nI want to be able to add a products to an" +
                    " order", ProgrammingLanguage.CSharp, new string[] {
                        "orders"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 7
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Price"});
            table1.AddRow(new string[] {
                        "Apple iPhone 5",
                        "500"});
            table1.AddRow(new string[] {
                        "Nokia 3310",
                        "100"});
#line 8
 testRunner.Given("there are following products in shop", ((string)(null)), table1, "Given ");
#line hidden
        }
        
        public virtual void SetFixture(AddProductsToOrderFeature.FixtureData fixtureData)
        {
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Add products to order")]
        [Xunit.TraitAttribute("Description", "Add product to empty order")]
        public virtual void AddProductToEmptyOrder()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add product to empty order", ((string[])(null)));
#line 13
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 14
 testRunner.Given("I have an empty order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 15
 testRunner.When("I add \'Apple iPhone 5\' to this order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductName",
                        "Quantity"});
            table2.AddRow(new string[] {
                        "Apple iPhone 5",
                        "1"});
#line 16
 testRunner.Then("order should have following lines", ((string)(null)), table2, "Then ");
#line 19
 testRunner.And("total price should be 500", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Add products to order")]
        [Xunit.TraitAttribute("Description", "Add multiple products to empty order")]
        public virtual void AddMultipleProductsToEmptyOrder()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add multiple products to empty order", ((string[])(null)));
#line 21
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 22
 testRunner.Given("I have an empty order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 23
 testRunner.When("I add \'Apple iPhone 5\' to this order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 24
  testRunner.And("I add \'Nokia 3310\' to this order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductName",
                        "Quantity"});
            table3.AddRow(new string[] {
                        "Apple iPhone 5",
                        "1"});
            table3.AddRow(new string[] {
                        "Nokia 3310",
                        "1"});
#line 25
 testRunner.Then("order should have following lines", ((string)(null)), table3, "Then ");
#line 29
 testRunner.And("total price should be 600", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Add products to order")]
        [Xunit.TraitAttribute("Description", "Add same product multiple times to empty order")]
        public virtual void AddSameProductMultipleTimesToEmptyOrder()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add same product multiple times to empty order", ((string[])(null)));
#line 31
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 32
 testRunner.Given("I have an empty order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 33
 testRunner.When("I add \'Nokia 3310\' to this order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 34
     testRunner.And("I add \'Nokia 3310\' to this order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductName",
                        "Quantity"});
            table4.AddRow(new string[] {
                        "Nokia 3310",
                        "2"});
#line 35
 testRunner.Then("order should have following lines", ((string)(null)), table4, "Then ");
#line 38
 testRunner.And("total price should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                AddProductsToOrderFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                AddProductsToOrderFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
